/*Challenge link:https://leetcode.com/problems/leaf-similar-trees/description/
Question:
Consider all the leaves of a binary tree, from left to right order, the values of those leaves form a leaf value sequence.

//see image in link


For example, in the given tree above, the leaf value sequence is (6, 7, 4, 9, 8).

Two binary trees are considered leaf-similar if their leaf value sequence is the same.

Return true if and only if the two given trees with head nodes root1 and root2 are leaf-similar.

 

Example 1:
//see image in link

Input: root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]
Output: true
Example 2:
//see image in link


Input: root1 = [1,2,3], root2 = [1,3,2]
Output: false
 

Constraints:

The number of nodes in each tree will be in the range [1, 200].
Both of the given trees will have values in the range [0, 200].
*/

//***************Solution********************
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }

 Return true if and only if the two given trees with head nodes root1 and root2 are leaf-similar.
 */
public class Solution {
    public bool LeafSimilar(TreeNode root1, TreeNode root2) {

        void CollectLeafValues(TreeNode root, List<int> leafValues) {
            //if null return
            // if left and right both null, add to leaf value to list
            if (root == null) 
                return;
            if (root.left == null && root.right == null)
                leafValues.Add(root.val);

            CollectLeafValues(root.left, leafValues);
            CollectLeafValues(root.right, leafValues);
        }

        var leafValues1 = new List<int>();
        var leafValues2 = new List<int>();
        CollectLeafValues(root1, leafValues1);
        CollectLeafValues(root2, leafValues2);

        return Enumerable.SequenceEqual(leafValues1, leafValues2);
    }
}
